==24718== Helgrind, a thread error detector
==24718== Copyright (C) 2007-2017, and GNU GPL'd, by OpenWorks LLP et al.
==24718== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==24718== Command: ./race
==24718== 
==24718== ---Thread-Announcement------------------------------------------
==24718== 
==24718== Thread #4 was created
==24718==    at 0x49989F3: clone (clone.S:76)
==24718==    by 0x49998EE: __clone_internal (clone-internal.c:83)
==24718==    by 0x49076D8: create_thread (pthread_create.c:295)
==24718==    by 0x49081FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==24718==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==24718==    by 0x1092C3: main (race.c:19)
==24718== 
==24718== ---Thread-Announcement------------------------------------------
==24718== 
==24718== Thread #3 was created
==24718==    at 0x49989F3: clone (clone.S:76)
==24718==    by 0x49998EE: __clone_internal (clone-internal.c:83)
==24718==    by 0x49076D8: create_thread (pthread_create.c:295)
==24718==    by 0x49081FF: pthread_create@@GLIBC_2.34 (pthread_create.c:828)
==24718==    by 0x4853767: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==24718==    by 0x1092C3: main (race.c:19)
==24718== 
==24718== ----------------------------------------------------------------
==24718== 
==24718== Possible data race during read of size 8 at 0x10C018 by thread #4
==24718== Locks held: none
==24718==    at 0x10920B: square (race.c:9)
==24718==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==24718==    by 0x4907AC2: start_thread (pthread_create.c:442)
==24718==    by 0x4998A03: clone (clone.S:100)
==24718== 
==24718== This conflicts with a previous write of size 8 by thread #3
==24718== Locks held: none
==24718==    at 0x109215: square (race.c:9)
==24718==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==24718==    by 0x4907AC2: start_thread (pthread_create.c:442)
==24718==    by 0x4998A03: clone (clone.S:100)
==24718==  Address 0x10c018 is 0 bytes inside data symbol "accum"
==24718== 
==24718== ----------------------------------------------------------------
==24718== 
==24718== Possible data race during write of size 8 at 0x10C018 by thread #4
==24718== Locks held: none
==24718==    at 0x109215: square (race.c:9)
==24718==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==24718==    by 0x4907AC2: start_thread (pthread_create.c:442)
==24718==    by 0x4998A03: clone (clone.S:100)
==24718== 
==24718== This conflicts with a previous write of size 8 by thread #3
==24718== Locks held: none
==24718==    at 0x109215: square (race.c:9)
==24718==    by 0x485396A: ??? (in /usr/libexec/valgrind/vgpreload_helgrind-amd64-linux.so)
==24718==    by 0x4907AC2: start_thread (pthread_create.c:442)
==24718==    by 0x4998A03: clone (clone.S:100)
==24718==  Address 0x10c018 is 0 bytes inside data symbol "accum"
==24718== 
2870
==24718== 
==24718== Use --history-level=approx or =none to gain increased speed, at
==24718== the cost of reduced accuracy of conflicting-access information
==24718== For lists of detected and suppressed errors, rerun with: -s
==24718== ERROR SUMMARY: 36 errors from 2 contexts (suppressed: 344 from 20)





Data Race Detected:

Data races occur when two or more threads access the same memory location concurrently,
and at least one of the accesses is a write.
Helgrind detected that both Thread #3 and Thread #4 are accessing 
a shared variable accum without any synchronization (i.e., without holding any locks).

How to Fix the Data Race:

Use Mutexes:
You can protect access to accum using a mutex. 
Before any thread reads from or writes to accum, 
it should lock the mutex, and after the operation, 
it should unlock the mutex.

Use Atomic Operations:
If the operation on accum is simple (like an increment), 
you could use atomic operations that are guaranteed to be thread-safe without the need for a mutex.